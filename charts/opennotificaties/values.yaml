tags:
  redis: true
  rabbitmq: true

replicaCount: 1

image:
  repository: opennotificaties/open-notificaties
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  fsGroup: 1000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  className: ""
  # -- ingress hosts
  hosts: []
  #  - host: opennotificaties.gemeente.nl
  #    paths:
  #      - path: /
  #        pathType: ImplementationSpecific
  tls: []
  #  - secretName: opennotificaties-tls
  #    hosts:
  #      - opennotificaties.gemeente.nl

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 200m
  #   memory: 256Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  enabled: true
  size: 1Gi
  storageClassName: ""
  existingClaim: null

existingSecret: null

# extraEnvVars -- Array with extra environment variables to add
# e.g:
# extraEnvVars:
#   - name: FOO
#     value: "bar"
#
extraEnvVars: []

# extraVolumes -- Optionally specify extra list of additional volumes
# e.g:
# extraVolumes:
#   - name: verify-certs
#     configMap:
#       name: verify-certs
#
extraVolumes: []

# extraVolumeMounts Optionally specify extra list of additional volumeMounts
# e.g:
# extraVolumeMounts:
#  - name: verify-certs
#    mountPath: /etc/ssl/certs/extra-certs/
extraVolumeMounts: []

# Path to extra certificates or CA (root) certificates, comma seperated
# Wardning, If the file does not exist the pod(s) will not start
# e.g.
# extraVerifyCerts: /etc/ssl/certs/extra-certs/staatdernederlandeng1.pem
extraVerifyCerts: ""

settings:
  allowedHosts: ""
  djangoSettingsModule: nrc.conf.docker
  useXForwardedHost: true

  # logNotifications -- When set to true notifications are
  # saved to the database and accessible from the admin interface
  logNotifications: true

  # secretKey -- Generate secret key at https://djecrety.ir/
  secretKey: ""

  # environment -- sets the 'ENVIRONMENT' variable
  environment: ""

  database:
    host: ""
    port: 5432
    username: ""
    password: ""
    name: ""
    sslmode: prefer

  # numProxies -- use 2 if enabling ingress
  numProxies: 1

  email:
    host: localhost
    port: 25
    username: ""
    password: ""
    useTLS: false

  flower:
    urlPrefix: ""
    basicAuth: ""

  elasticapm:
    url: ""
    token: ""
    serviceName: ""

  sentry:
    dsn: ""

  cache:
    # cache.default -- Sets 'CACHE_DEFAULT' var, only required when tags.redis is false
    default: ""
    # cache.default -- Sets 'CACHE_AXES' var, only required when tags.redis is false
    axes: ""
    # When not using the redis subcharts you can set them manually like this:
    # default: myredisserver:6379/0
    # axes: myredisserver:6379/0

  celery:
    # celery.loglevel -- Sets the 'CELERY_LOGLEVEL' var:
    # choises: DEBUG|INFO|WARNING|ERROR|CRITICAL|FATAL
    logLevel: debug
    # celery.brokerUrl -- Sets the 'CELERY_BROKER_URL' var, only required when tags.rabbitmq is false
    brokerUrl: ""
    # celery.resultBackend -- Sets the 'CELERY_RESULT_BACKEND' var, only required when tags.redis is false
    resultBackend: ""
    # celery.publishBrokerUrl -- Sets the 'PUBLISHER_BROKER_URL' var, only required when tags.rabbitmq is false
    publishBrokerUrl: ""
    # celery.rabbitmqHost -- RabbitMQ server hostname
    rabbitmqHost: ""
    # When not using the rabbitmq / redis subcharts you can set them manually like this:
    #
    # brokerUrl: amqp://username:password@myrabbitmqbroker:5672//
    # resultBackend: redis://myredisserver:6379/1
    # publishBrokerUrl: amqp://username:password@myrabbitmqbroker::5672/%2F
    # rabbitmqHost: myrabbitmqbroker

  isHttps: true

  debug: false

  uwsgi:
    master: ''
    threads: ''
    processes: ''
    maxRequests: ''
    harakiri: ''

worker:
  replicaCount: 1
  concurrency: 4
  podLabels: {}
  resources: {}
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 100
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

nginx:
  image:
    repository: nginxinc/nginx-unprivileged
    pullPolicy: IfNotPresent
    tag: stable
  replicaCount: 1
  podLabels: {}
  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 101
  autoscaling:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  resources: {}

flower:
  enabled: true
  replicaCount: 1
  podLabels: {}
  service:
    type: ClusterIP
    port: 80
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  resources: {}

##################
# Redis subchart #
##################

redis:
  architecture: standalone
  auth:
    enabled: false
  master:
    persistence:
      enabled: false
    resources:
      requests:
        cpu: 10m
        memory: 20Mi

#####################
# RabbitMQ subchart #
#####################

rabbitmq:
  auth:
    username: guest
    password: guest
    erlangCookie: SUPER-SECRET

  persistence:
    enabled: false
    size: 1Gi
    existingClaim: null